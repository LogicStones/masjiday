@model Admin.Models.Notification

@{
    ViewBag.Title = "Notifications Center";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@section stylesheet{

}

@section scripts{

    @*<script type="text/javascript">

        $("div#methodType .has-danger").hide();
        $("div#audianceType .has-danger").hide();

        var audianceType = $('#hfAudianceTypeIds').val().split(',');

        $("input[type='checkbox'].audiance-type").each(function () {
            if (jQuery.inArray($(this).val(), audianceType) !== -1)
                $(this).prop('checked', true);
        });

        var methodTypes = $('#hfMethodTypeIds').val().split(',');

        $("input[type='checkbox'].method-type").each(function () {
            if (jQuery.inArray($(this).val(), methodTypes) !== -1)
                $(this).prop('checked', true);
        });

        $("#btnSend").click(function (e) {

            var methodTypes = [];

            $(".method-type:checkbox:checked").each(function () {
                methodTypes.push($(this).val());
            });

            $("#hfMethodTypeIds").val(methodTypes.join(","));

            if (!(methodTypes.length > 0)) {
                $("div#methodType .has-danger").show();
                e.preventDefault();
            }
            else {
                $("div#methodType .has-danger").hide();
            }

            var audianceTypes = [];

            $(".audiance-type:checkbox:checked").each(function () {
                audianceTypes.push($(this).val());
            });

            $("#hfAudianceTypeIds").val(audianceTypes.join(","));

            if (!(audianceTypes.length > 0)) {
                $("div#audianceType .has-danger").show();
                e.preventDefault();
            } else {
                $("div#audianceType .has-danger").hide();
            }
        });

    </script>*@

}

@using (Html.BeginForm("SendNotification", "Home", FormMethod.Post, new { id = "notificationsForm" }))
{
    @Html.AntiForgeryToken()

    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);

    <div class="box bg-white box-block">

        @if (TempData["Message"] != null)
        {
            <div class="row">
                <div class="col-xs-12">
                    @if (TempData["Message"].ToString().ToLower().Contains("failed"))
                    {
                        <div class="alert alert-danger-outline alert-dismissible fade in" role="alert">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <strong>@TempData["Message"].ToString()</strong>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-success-outline alert-dismissible fade in" role="alert">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <strong>@TempData["Message"].ToString()</strong>
                        </div>
                    }
                </div>
            </div>
        }

    <div class="row">
        <div class="col-xs-12 form-group">
            <label>Title</label><br />
            @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
            <span class="has-danger">
                @Html.ValidationMessageFor(m => m.Title, null, new { @class = "form-control-feedback" })
            </span>
        </div>
        <div class="col-xs-12 form-group">
            <label>Content</label><br />
            @Html.TextAreaFor(m => m.Description, new { @class = "form-control", @rows = "10", @cols = "140" })
            <span class="has-danger">
                @Html.ValidationMessageFor(m => m.Description, null, new { @class = "form-control-feedback" })
            </span>
        </div>
        @*<div class="col-xs-12 form-group">
            <label>Send To</label>
            <div id="audianceType" class="row m-b-1">
                <div class="col-xs-12 col-sm-3">
                    <label class="custom-control custom-checkbox">
                        @Html.CheckBox("Restaurants", new { @class = "custom-control-input audiance-type", value = "1" })
                        <span class="custom-control-indicator"></span>
                        <span class="custom-control-description">Restaurants</span>
                    </label>
                </div>
                <div class="col-xs-12 col-sm-3">
                    <label class="custom-control custom-checkbox">
                        @Html.CheckBox("Users", new { @class = "custom-control-input audiance-type", value = "2" })
                        <span class="custom-control-indicator"></span>
                        <span class="custom-control-description">Users</span>
                    </label>
                </div>
                <div class="col-xs-12 col-sm-3">
                    <label class="custom-control custom-checkbox">
                        @Html.CheckBox("Riders", new { @class = "custom-control-input audiance-type", value = "3" })
                        <span class="custom-control-indicator"></span>
                        <span class="custom-control-description">Riders</span>
                    </label>
                </div>
                <div class="col-xs-12 form-group">
                    <span class="has-danger">
                        <span class="form-control-feedback">Please select at least one option.</span>
                    </span>
                </div>
            </div>
            @Html.HiddenFor(m => m.AudianceTypeIds, new { @id = "hfAudianceTypeIds" })
        </div>
        <div class="col-xs-12 form-group">
            <label>Send Using</label>
            <div id="methodType" class="row m-b-1">
                <div class="col-xs-12 col-sm-3">
                    <label class="custom-control custom-checkbox">
                        @Html.CheckBox("SMS", new { @class = "custom-control-input method-type", value = "1" })
                        <span class="custom-control-indicator"></span>
                        <span class="custom-control-description">SMS</span>
                    </label>
                </div>
                <div class="col-xs-12 col-sm-3">
                    <label class="custom-control custom-checkbox">
                        @Html.CheckBox("Email", new { @class = "custom-control-input method-type", value = "2" })
                        <span class="custom-control-indicator"></span>
                        <span class="custom-control-description">Email</span>
                    </label>
                </div>
                <div class="col-xs-12 col-sm-3">
                    <label class="custom-control custom-checkbox">
                        @Html.CheckBox("Push Notification", new { @class = "custom-control-input method-type", value = "3" })
                        <span class="custom-control-indicator"></span>
                        <span class="custom-control-description">Push Notification</span>
                    </label>
                </div>
                <div class="col-xs-12 form-group">
                    <span class="has-danger">
                        <span class="form-control-feedback">Please select at least one option.</span>
                    </span>
                </div>
                @Html.HiddenFor(m => m.MethodTypeIds, new { @id = "hfMethodTypeIds" })
            </div>
        </div>*@
        <div class="col-xs-12">
            <button type="submit" id="btnSend" class="btn btn-black pull-right">Send Notification</button>
        </div>
    </div>
    </div>
}